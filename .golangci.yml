# Options for analysis running
run:
  # Timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m
  
  # Include test files or not, default is true
  tests: true
  
  # Default concurrency is a available CPU number
  concurrency: 4
  
  # Exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  
  # Which dirs to skip: issues from them won't be reported
  skip-dirs:
    - vendor
    - docs

# Output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number
  
  # Print lines of code with issue, default is true
  print-issued-lines: true
  
  # Print linter name in the end of issue text, default is true
  print-linter-name: true

# All available settings of specific linters
linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    check-type-assertions: true
    
  goimports:
    # Put imports beginning with prefix after 3rd-party packages
    local-prefixes: KnowledgeHub
    
  govet:
    # Report about shadowed variables
    check-shadowing: true
    
  revive:
    # Minimum confidence for issues, default is 0.8
    min-confidence: 0.8
    rules:
      - name: blank-imports
        disabled: false
        severity: warning
        
  gocyclo:
    # Minimal code complexity to report, 30 by default
    min-complexity: 15
    
  dupl:
    # Tokens count to trigger issue, 150 by default
    threshold: 100
    
  goconst:
    # Minimal length of string constant, 3 by default
    min-len: 3
    # Minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
    
  lll:
    # Max line length, lines longer will be reported. Default is 120.
    line-length: 120
    
  unused:
    # Treat code as a program (not a library) and report unused exported identifiers
    check-exported: false
    
  unparam:
    # Inspect exported functions, default is false
    check-exported: false

# Linters to run, `golangci-lint linters` to see all available linters
linters:
  enable:
    - errcheck     # Detect unchecked errors
    - gosimple     # Simplify code
    - govet        # Vet examines Go source code and reports suspicious constructs
    - ineffassign  # Detect ineffectual assignments
    - staticcheck  # Go static analysis
    - typecheck    # Like the front-end of a Go compiler
    - unused       # Check for unused constants, variables, functions and types
    - goimports    # Check import statements are formatted according to the goimports tool
    - gosec        # Inspects source code for security problems
    - revive       # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - gocyclo      # Computes and checks the cyclomatic complexity of functions
    - dupl         # Tool for code clone detection
    - goconst      # Finds repeated strings that could be replaced by a constant
    - gofmt        # Checks whether code was gofmt-ed
    - misspell     # Finds commonly misspelled English words in comments
    - lll          # Reports long lines
    - unconvert    # Remove unnecessary type conversions
    - unparam      # Reports unused function parameters
  disable:
    - funlen       # Tool for detection of long functions
    - gochecknoglobals # Check that no global variables exist
    - gochecknoinits   # Check that no init functions are present

# Issues configuration
issues:
  # Maximum count of issues with the same text
  max-same-issues: 3
  
  # Maximum issues count per one linter
  max-issues-per-linter: 50
  
  # List of regexps of issue texts to exclude
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - dupl
        - gosec
        - lll
